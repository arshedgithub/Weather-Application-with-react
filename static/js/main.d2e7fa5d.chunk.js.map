{"version":3,"sources":["components/weather.jsx","components/form.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","interceptors","response","use","error","alert","console","log","status","Weather","city","useState","lat","setLat","lon","setLon","cityName","setCityName","country","setCountry","temp","setTemp","humidity","setHumidity","pressure","setPressure","weather","setWeather","wind","setWind","weatherId","setWeatherId","weatherIcon","setWeatherIcon","weatherIcons","get_WeatherIcon","icon","fetchWeather","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","url","get","process","res","data","name","main","sys","id","description","Math","round","speed","useEffect","className","style","maxWidth","role","Form","onSubmit","type","placeholder","autoComplete","App","setCity","e","preventDefault","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2e7fa5d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  if (!error.response) {\r\n    alert(\"An unexpected error occured\");\r\n    console.log(error);\r\n    return;\r\n  }\r\n  const { status } = error.response;\r\n\r\n  if (status === 404) alert(\"Enter a valid city name\");\r\n  else if (status >= 400 && status <= 500) alert(\"Enter a valid city name\");\r\n  else alert(\"An unexpected error occured\");\r\n});\r\n\r\nconst Weather = ({ city }) => {\r\n  const [lat, setLat] = useState();\r\n  const [lon, setLon] = useState();\r\n\r\n  const [cityName, setCityName] = useState();\r\n  const [country, setCountry] = useState();\r\n  const [temp, setTemp] = useState();\r\n  const [humidity, setHumidity] = useState();\r\n  const [pressure, setPressure] = useState();\r\n  const [weather, setWeather] = useState();\r\n  const [wind, setWind] = useState();\r\n  const [weatherId, setWeatherId] = useState();\r\n  const [weatherIcon, setWeatherIcon] = useState();\r\n\r\n  const weatherIcons = {\r\n    Thunderstorm: \"wi-thunderstorm\",\r\n    Drizzle: \"wi-sleet\",\r\n    Rain: \"wi-storm-showers\",\r\n    Snow: \"wi-snow\",\r\n    Atmosphere: \"wi-fog\",\r\n    Clear: \"wi-day-sunny\",\r\n    Clouds: \"wi-day-fog\",\r\n  };\r\n\r\n  const get_WeatherIcon = () => {\r\n    let icon;\r\n    switch (true) {\r\n      case weatherId >= 200 && weatherId < 232:\r\n        icon = weatherIcons.Thunderstorm;\r\n        break;\r\n      case weatherId >= 300 && weatherId <= 321:\r\n        icon = weatherIcons.Drizzle;\r\n        break;\r\n      case weatherId >= 500 && weatherId <= 521:\r\n        icon = weatherIcons.Rain;\r\n        break;\r\n      case weatherId >= 600 && weatherId <= 622:\r\n        icon = weatherIcons.Snow;\r\n        break;\r\n      case weatherId >= 701 && weatherId <= 781:\r\n        icon = weatherIcons.Atmosphere;\r\n        break;\r\n      case weatherId === 800:\r\n        icon = weatherIcons.Clear;\r\n        break;\r\n      default:\r\n        icon = weatherIcons.Clouds;\r\n    }\r\n    setWeatherIcon(icon);\r\n  };\r\n\r\n  const fetchWeather = async () => {\r\n    try {\r\n      navigator.geolocation.getCurrentPosition(async function (position) {\r\n        setLat(position.coords.latitude);\r\n        setLon(position.coords.longitude);\r\n\r\n        const url = city\r\n          ? `q=${city}`\r\n          : `lat=${position.coords.latitude}&lon=${position.coords.longitude}`;\r\n\r\n        const res = await axios.get(\r\n          `${process.env.REACT_APP_API_URL}weather?${url}&appid=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n\r\n        if (!res) return;\r\n        const data = res.data;\r\n\r\n        const { name, main, weather, wind, sys } = data;\r\n\r\n        setWeatherId(weather[0].id);\r\n        setCityName(name);\r\n        setCountry(sys.country);\r\n        setWeather(weather[0].description);\r\n        setTemp(Math.round(main.temp - 273.15));\r\n        setHumidity(main.humidity);\r\n        setPressure(main.pressure);\r\n        setWind(wind.speed);\r\n      });\r\n      get_WeatherIcon();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWeather();\r\n  }, [lat, lon, city]);\r\n\r\n  return (\r\n    <div\r\n      className=\"card-content m-auto p-4 my-4 rounded\"\r\n      style={{ maxWidth: \"400px\" }}\r\n    >\r\n      {!cityName ? (\r\n        <div className=\"spinner-border my-5 p-2\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>\r\n            {cityName}, {country}\r\n          </h1>\r\n          <div className=\"py-3\">\r\n            <i className={`wi ${weatherIcon} display-1`} />\r\n          </div>\r\n          <h4>{weather}</h4>\r\n          <h1>{temp}&deg;C</h1>\r\n          <h4>Humidity : {humidity}%</h4>\r\n          <h6>Average Wind Speed : {wind} m/s</h6>\r\n          <h6>Air Pressure : {pressure} Pa</h6>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nconst Form = ({ onSubmit }) => {\r\n  //   const handleSubmit = (e) => {\r\n  //     e.preventDefault();\r\n  //     console.log(e.target.city.value);\r\n  //     // onGetCity(e.target.city.value);\r\n  //   };\r\n  return (\r\n    <form className=\"my-3\" onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"px-2 rounded\"\r\n        placeholder=\"seach city\"\r\n        name=\"city\"\r\n        autoComplete=\"off\"\r\n      />\r\n      <button className=\"mx-2 border-0 rounded px-2\" type=\"submit\">\r\n        get weather\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import './App.css';\nimport Weather from './components/weather';\nimport Form from './components/form';\nimport { useState } from 'react';\n\nfunction App() {\n  const [city, setCity] = useState();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCity(e.target.city.value);\n  }\n\n  return (\n    <div className=\"App mx-2\">\n      <Form onSubmit={handleSubmit} />\n      <Weather city={city} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}